diff --git a/dist/components/layout/root-toggle.js b/dist/components/layout/root-toggle.js
index a84cd8e06c168fedd4d89315ebae31856a84c242..706ec81528b2fc94183f947c48c21899ce8caa8a 100644
--- a/dist/components/layout/root-toggle.js
+++ b/dist/components/layout/root-toggle.js
@@ -12,12 +12,15 @@ export function RootToggle({ options, placeholder, ...props }) {
     const [open, setOpen] = useState(false);
     const { closeOnRedirect } = useSidebar();
     const pathname = usePathname();
+    const decodedPathname = decodeURIComponent(pathname);
     const selected = useMemo(() => {
-        const lookup = pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;
+        const lookup = decodedPathname.endsWith('/') ? decodedPathname.slice(0, -1) : decodedPathname;
         return options.findLast((item) => {
-            if (item.urls)
-                return item.urls.has(lookup);
-            return isActive(item.url, pathname, true);
+            if (item.urls) {
+                const has = item.urls.has(lookup)
+                return has
+            }
+            return isActive(item.url, decodedPathname, true);
         });
     }, [options, pathname]);
     const onClick = () => {
diff --git a/dist/components/layout/sidebar.js b/dist/components/layout/sidebar.js
index 97cbc046467c06e0034578423c3946fc674b1366..51c2919bdf17bafba664bc138b2661af2ed6362c 100644
--- a/dist/components/layout/sidebar.js
+++ b/dist/components/layout/sidebar.js
@@ -101,7 +101,8 @@ export function SidebarSeparator(props) {
 }
 export function SidebarItem({ icon, ...props }) {
     const pathname = usePathname();
-    const active = props.href !== undefined && isActive(props.href, pathname, false);
+    const decodedPathname = decodeURIComponent(pathname);
+    const active = props.href !== undefined && isActive(props.href, decodedPathname, false);
     const { prefetch } = useInternalContext();
     return (_jsxs(Link, { ...props, "data-active": active, className: cn(itemVariants({ active }), props.className), prefetch: prefetch, children: [icon ?? (props.external ? _jsx(ExternalLink, {}) : null), props.children] }));
 }
@@ -120,7 +121,7 @@ export function SidebarFolderTrigger({ className, ...props }) {
 export function SidebarFolderLink(props) {
     const { open, setOpen } = useFolderContext();
     const { prefetch } = useInternalContext();
-    const pathname = usePathname();
+    const pathname = decodeURIComponent(usePathname());
     const active = props.href !== undefined && isActive(props.href, pathname, false);
     return (_jsxs(Link, { ...props, "data-active": active, className: cn(itemVariants({ active }), 'w-full', props.className), onClick: (e) => {
             if (e.target instanceof Element &&
diff --git a/dist/contexts/tree.js b/dist/contexts/tree.js
index d670aa96cccf97d9f587c22885b83fcd16cdee04..450d8c74df2bb564565d9272b90c5a47630d8095 100644
--- a/dist/contexts/tree.js
+++ b/dist/contexts/tree.js
@@ -7,7 +7,7 @@ const TreeContext = createContext('TreeContext');
 const PathContext = createContext('PathContext', []);
 export function TreeContextProvider(props) {
     const nextIdRef = useRef(0);
-    const pathname = usePathname();
+    const pathname = decodeURIComponent(usePathname());
     // I found that object-typed props passed from a RSC will be re-constructed, hence breaking all hooks' dependencies
     // using the id here to make sure this never happens
     // eslint-disable-next-line react-hooks/exhaustive-deps
diff --git a/dist/layouts/docs/page-client.js b/dist/layouts/docs/page-client.js
index be412d26cc8d032d73da73b98a3c7f90aed96538..522c201168a7e6ff925da3a0147a18ee405a8d73 100644
--- a/dist/layouts/docs/page-client.js
+++ b/dist/layouts/docs/page-client.js
@@ -113,7 +113,7 @@ export function PageFooter({ items, ...props }) {
         const cached = listCache.get(root.$id);
         const list = cached ?? scanNavigationList(root.children);
         listCache.set(root.$id, list);
-        const idx = list.findIndex((item) => isActive(item.url, pathname, false));
+        const idx = list.findIndex((item) => isActive(item.url, decodeURIComponent(pathname), false));
         if (idx === -1)
             return {};
         return {
diff --git a/dist/layouts/notebook/client.js b/dist/layouts/notebook/client.js
index 9122d2fb0365d0769e7e0772531a10cd80c195d8..61c76dd47e6a0f112dcc4f25adb6c4f9b3d926e0 100644
--- a/dist/layouts/notebook/client.js
+++ b/dist/layouts/notebook/client.js
@@ -34,7 +34,7 @@ export function NavbarSidebarTrigger({ className, ...props }) {
         })), onClick: () => setOpen((prev) => !prev), children: _jsx(SidebarIcon, {}) }));
 }
 export function LayoutTabs({ options, ...props }) {
-    const pathname = usePathname();
+    const pathname = decodeURIComponent(usePathname());
     const selected = useMemo(() => {
         const url = pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;
         return options.findLast((option) => {
diff --git a/dist/layouts/shared/client.js b/dist/layouts/shared/client.js
index 1ab3f081e81cc059a8a4ed27554021107ff075fa..cb81a3abd39c65a9988542b1067eb2209bb07808 100644
--- a/dist/layouts/shared/client.js
+++ b/dist/layouts/shared/client.js
@@ -7,6 +7,6 @@ export function BaseLinkItem({ ref, item, ...props }) {
     const pathname = usePathname();
     const activeType = item.active ?? 'url';
     const active = activeType !== 'none' &&
-        isActive(item.url, pathname, activeType === 'nested-url');
+        isActive(item.url, decodeURIComponent(pathname), activeType === 'nested-url');
     return (_jsx(Link, { ref: ref, href: item.url, external: item.external, ...props, "data-active": active, children: props.children }));
 }
